precompile(Tuple{typeof(Base.CoreLogging.shouldlog), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Module, Symbol, Symbol})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:context,), Tuple{Nothing}}, typeof(Base.repr), Base.Multimedia.MIME{:var"text/plain"}, Base.PkgId})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, String, String, Vararg{Any}})
precompile(Tuple{typeof(Base.get), Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}, Symbol, Nothing})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.isopen), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}})
precompile(Tuple{typeof(Base.CoreLogging.default_metafmt), Base.CoreLogging.LogLevel, Vararg{Any, 5}})
precompile(Tuple{typeof(Base.string), Module})
precompile(Tuple{typeof(Base.Filesystem.contractuser), String})
precompile(Tuple{Type{Base.IOContext{IO_t} where IO_t<:IO}, Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Base.TTY})
precompile(Tuple{typeof(Base.write), Base.TTY, Array{UInt8, 1}})
precompile(Tuple{typeof(Core.memoryref), GenericMemory{:not_atomic, Array{NamedTuple{(:label, :value), Tuple{Symbol, Any}}, 1}, Core.AddrSpace{Core}(0x00)}})
precompile(Tuple{typeof(Base.CoreLogging.handle_message), Base.CoreLogging.ConsoleLogger, Base.CoreLogging.LogLevel, Vararg{Any, 6}})
precompile(Tuple{typeof(Base.repeat), Char, Int64})
precompile(Tuple{typeof(Base.in!), REPL.REPLCompletions.PackageCompletion, Base.Set{REPL.REPLCompletions.Completion}})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.PackageCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.Lt{Base.Sort.var"#30#31"{Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}}}, REPL.REPLCompletions.PackageCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.Order.lt), Base.Order.By{typeof(REPL.REPLCompletions.completion_text), Base.Order.ForwardOrdering}, REPL.REPLCompletions.ModuleCompletion, REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(REPL.REPLCompletions.completion_text), REPL.REPLCompletions.PackageCompletion})
precompile(Tuple{typeof(Base.in), String, Array{String, 1}})
precompile(Tuple{typeof(Base.print), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, UInt64})
precompile(Tuple{Base.Precompilation.var"##precompilepkgs#10", Bool, Bool, Bool, Bool, Bool, Pair{Base.Cmd, Base.CacheFlags}, Base.TTY, Bool, Bool, typeof(Base.Precompilation.precompilepkgs), Array{String, 1}})
precompile(Tuple{typeof(Base.getindex), Base.Dict{Base.PkgId, Base.Set{Base.PkgId}}, Base.PkgId})
precompile(Tuple{typeof(Base.issubset), Array{Base.PkgId, 1}, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#collect_all_deps#52", Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.PkgId, Base.Set{Base.PkgId}})
precompile(Tuple{Base.Precompilation.var"#collect_all_deps#52", Base.Dict{Base.PkgId, Array{Base.PkgId, 1}}, Base.PkgId})
precompile(Tuple{typeof(Base.vect), Base.Dict{String, Any}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Nothing, Base.Dict{String, Any}}}, Base.Dict{String, Any}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, Base.Dict{String, Any}}, 1}})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Any}})
precompile(Tuple{typeof(Base.getindex), Type{Union{Nothing, Array{String, 1}}}, Array{String, 1}, Nothing})
precompile(Tuple{typeof(Base.iterate), Array{Union{Nothing, Array{String, 1}}, 1}})
precompile(Tuple{typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Base.UUID})
precompile(Tuple{typeof(Base.print), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Base.UUID})
precompile(Tuple{typeof(Base.vect), Array{String, 1}, Vararg{Array{String, 1}}})
precompile(Tuple{typeof(Base.iterate), Array{Array{String, 1}, 1}})
precompile(Tuple{typeof(Base.lock), Base.TTY})
precompile(Tuple{typeof(Base.unlock), Base.TTY})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:color,), Tuple{Symbol}}, typeof(Base.Precompilation.printpkgstyle), Base.IOContext{IO}, Symbol, String})
precompile(Tuple{typeof(Base.sprint), Function, ErrorException})
precompile(Tuple{typeof(Base.showerror), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, ErrorException})
precompile(Tuple{typeof(Base.println), Base.IOContext{IO}})
precompile(Tuple{typeof(Base.write), Base.TTY, UInt8})
precompile(Tuple{Type{Base.Precompilation.PkgPrecompileError}, String})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{Base.Precompilation.PkgPrecompileError, Array{Union{Ptr{Nothing}, Base.InterpreterIP}, 1}}}, Symbol})
precompile(Tuple{Type{Base.StackTraces.StackFrame}, Symbol, Symbol, Int64, Nothing, Bool, Bool, UInt64})
precompile(Tuple{typeof(Base.getproperty), NamedTuple{(:exception, :backtrace), Tuple{Base.Precompilation.PkgPrecompileError, Array{Base.StackTraces.StackFrame, 1}}}, Symbol})
precompile(Tuple{typeof(Base.length), Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.Precompilation.PkgPrecompileError, Array{Base.StackTraces.StackFrame, 1}}}, Int64})
precompile(Tuple{typeof(Base.indexed_iterate), NamedTuple{(:exception, :backtrace), Tuple{Base.Precompilation.PkgPrecompileError, Array{Base.StackTraces.StackFrame, 1}}}, Int64, Int64})
precompile(Tuple{typeof(Core.kwcall), NamedTuple{(:backtrace,), Tuple{Bool}}, typeof(Base.showerror), Base.IOContext{Base.TTY}, Base.Precompilation.PkgPrecompileError, Array{Base.StackTraces.StackFrame, 1}})
precompile(Tuple{typeof(Base.show), Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}, Method})
precompile(Tuple{typeof(Base.show_signature_function), Base.IOContext{Base.GenericIOBuffer{GenericMemory{:not_atomic, UInt8, Core.AddrSpace{Core}(0x00)}}}, Any, Bool, String, Bool})
