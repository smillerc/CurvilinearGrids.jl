using StaticArrays
using ForwardDiff: derivative, gradient

function get_grid_metrics(x, y, z)

    # Make sure to define these ahead of time
    # x((ξ, η, ζ)) = x(ξ, η, ζ)
    # y((ξ, η, ζ)) = y(ξ, η, ζ)
    # z((ξ, η, ζ)) = z(ξ, η, ζ)

    ∇x(ξ, η, ζ) = gradient(x, @SVector [ξ, η, ζ]) # ∂x∂ξ, ∂x∂η, ∂x∂ζ
    ∇y(ξ, η, ζ) = gradient(y, @SVector [ξ, η, ζ]) # ∂z∂ξ, ∂z∂η, ∂z∂ζ
    ∇z(ξ, η, ζ) = gradient(z, @SVector [ξ, η, ζ]) # ∂y∂ξ, ∂y∂η, ∂y∂ζ

    inv_jacobian_matrix(ξ, η, ζ) = @SMatrix [
        ∇x(ξ, η, ζ)
        ∇y(ξ, η, ζ)
        ∇z(ξ, η, ζ)
    ]

    jacobian_matrix(ξ, η, ζ) = inv(inv_jacobian_matrix(ξ, η, ζ))


    ξ̂x(ξ, η, ζ) = ∂y∂η(ξ, η, ζ) * z(ξ, η, ζ)


    # ∂(∂y/∂η * z)/∂ζ
    ∂yη_∂ζ(ξ, η, ζ) = derivative(ζ -> ∂y∂η(ξ, η, ζ) * z(ξ, η, ζ), [ξ, ζ])


    ξ̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(ξ̂t * x_τ + ξ̂t * y_τ + ξ̂t * z_τ)
    η̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(η̂t * x_τ + η̂t * y_τ + η̂t * z_τ)
    ζ̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(ζ̂t * x_τ + ζ̂t * y_τ + ζ̂t * z_τ)

    # ξ̂x(ξ, η, ζ) = ∂y∂η(ξ, η, ζ) * ∂z∂ζ(ξ, η, ζ) - ∂y∂ζ(ξ, η, ζ) * ∂z∂η(ξ, η, ζ)
    # ξ̂y(ξ, η, ζ) = ∂z∂η(ξ, η, ζ) * ∂x∂ζ(ξ, η, ζ) - ∂z∂ζ(ξ, η, ζ) * ∂x∂η(ξ, η, ζ)
    # ξ̂z(ξ, η, ζ) = ∂x∂η(ξ, η, ζ) * ∂y∂ζ(ξ, η, ζ) - ∂x∂ζ(ξ, η, ζ) * ∂y∂η(ξ, η, ζ)

    # η̂x(ξ, η, ζ) = ∂y∂ζ(ξ, η, ζ) * ∂z∂ξ(ξ, η, ζ) - ∂y∂ξ(ξ, η, ζ) * ∂z∂ζ(ξ, η, ζ)
    # η̂y(ξ, η, ζ) = ∂z∂ζ(ξ, η, ζ) * ∂x∂ξ(ξ, η, ζ) - ∂z∂ξ(ξ, η, ζ) * ∂x∂ζ(ξ, η, ζ)
    # η̂z(ξ, η, ζ) = ∂x∂ζ(ξ, η, ζ) * ∂y∂ξ(ξ, η, ζ) - ∂x∂ξ(ξ, η, ζ) * ∂y∂ζ(ξ, η, ζ)

    # ζ̂x(ξ, η, ζ) = ∂y∂ξ(ξ, η, ζ) * ∂z∂η(ξ, η, ζ) - ∂y∂η(ξ, η, ζ) * ∂z∂ξ(ξ, η, ζ)
    # ζ̂y(ξ, η, ζ) = ∂z∂ξ(ξ, η, ζ) * ∂x∂η(ξ, η, ζ) - ∂z∂η(ξ, η, ζ) * ∂x∂ξ(ξ, η, ζ)
    # ζ̂z(ξ, η, ζ) = ∂x∂ξ(ξ, η, ζ) * ∂y∂η(ξ, η, ζ) - ∂x∂η(ξ, η, ζ) * ∂y∂ξ(ξ, η, ζ)


    # ξ̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(ξ̂t * x_τ + ξ̂t * y_τ + ξ̂t * z_τ)
    # η̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(η̂t * x_τ + η̂t * y_τ + η̂t * z_τ)
    # ζ̂t(ξ, η, ζ, (x_τ, y_τ, z_τ)) = -(ζ̂t * x_τ + ζ̂t * y_τ + ζ̂t * z_τ)

    function _get_metrics(ξ, η, ζ)
        ∂x∂ξ, ∂x∂η, ∂x∂ζ = gradient(x, @SVector [ξ, η, ζ])
        ∂z∂ξ, ∂z∂η, ∂z∂ζ = gradient(y, @SVector [ξ, η, ζ])
        ∂y∂ξ, ∂y∂η, ∂y∂ζ = gradient(z, @SVector [ξ, η, ζ])


        ∂yη_∂ζ = derivative(ζ -> ∂y∂η * z(ξ, η, ζ))

    end

end

